To create this application, we will need to create a backend server that serves the frontend files and handles the API requests to TMDB. We will use Node.js with Express.js for the backend and React for the frontend. 

Let's start with the backend.

The backend will have the following files:

1. `package.json`: This file will contain the project metadata and dependencies.
2. `server.js`: This is the entry point of our application. It will set up the Express server and handle the API requests.
3. `.env`: This file will contain environment variables such as the TMDB API key.

For the frontend, we will have the following files:

1. `public/index.html`: This is the main HTML file that will be served by our Express server.
2. `src/App.js`: This is the main React component that will contain the search box and handle the autocomplete functionality.
3. `src/index.js`: This is the entry point of our React application. It will render the `App` component into the `index.html` file.
4. `package.json`: This file will contain the project metadata and dependencies for the frontend.

Let's start with the backend files.

`package.json`
```json
{
  "name": "tmdb-autocomplete",
  "version": "1.0.0",
  "description": "A website with a search box that autocompletes TV and series titles using the TMDB API.",
  "main": "server.js",
  "scripts": {
    "start": "node server.js"
  },
  "dependencies": {
    "express": "^4.17.1",
    "axios": "^0.21.1",
    "dotenv": "^8.2.0",
    "cors": "^2.8.5"
  }
}
```

`server.js`
```javascript
require('dotenv').config();
const express = require('express');
const axios = require('axios');
const cors = require('cors');

const app = express();
app.use(cors());
app.use(express.static('public'));

app.get('/search/:query', async (req, res) => {
  const query = req.params.query;
  const response = await axios.get(`https://api.themoviedb.org/3/search/tv?api_key=${process.env.TMDB_API_KEY}&query=${query}`);
  res.json(response.data.results);
});

app.listen(8000, () => {
  console.log('Server is running on port 8000');
});
```

`.env`
```env
TMDB_API_KEY=your_tmdb_api_key
```

Now, let's move on to the frontend files.

`public/index.html`
```html
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>TMDB Autocomplete</title>
</head>
<body>
  <div id="root"></div>
  <script src="../src/index.js"></script>
</body>
</html>
```

`src/App.js`
```javascript
import React, { useState } from 'react';
import axios from 'axios';

function App() {
  const [query, setQuery] = useState('');
  const [results, setResults] = useState([]);

  const search = async (e) => {
    setQuery(e.target.value);
    const response = await axios.get(`http://localhost:8000/search/${e.target.value}`);
    setResults(response.data);
  };

  return (
    <div>
      <input type="text" value={query} onChange={search} placeholder="Search for a TV show" />
      <ul>
        {results.map(result => (
          <li key={result.id}>{result.name}</li>
        ))}
      </ul>
    </div>
  );
}

export default App;
```

`src/index.js`
```javascript
import React from 'react';
import ReactDOM from 'react-dom';
import App from './App';

ReactDOM.render(<App />, document.getElementById('root'));
```

`package.json`
```json
{
  "name": "tmdb-autocomplete-frontend",
  "version": "1.0.0",
  "description": "Frontend for the TMDB Autocomplete website.",
  "main": "src/index.js",
  "scripts": {
    "start": "parcel src/index.html"
  },
  "dependencies": {
    "react": "^17.0.2",
    "react-dom": "^17.0.2",
    "axios": "^0.21.1"
  },
  "devDependencies": {
    "parcel-bundler": "^1.12.4",
    "babel-preset-react": "^6.24.1"
  },
  "babel": {
    "presets": [
      "react"
    ]
  }
}
```

To run the application, you will need to start both the backend and frontend servers. You can start the backend server by running `npm start` in the backend directory, and you can start the frontend server by running `npm start` in the frontend directory.